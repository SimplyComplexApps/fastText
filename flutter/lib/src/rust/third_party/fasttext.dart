// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `drop`, `eq`, `fmt`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FastText>>
abstract class FastText implements RustOpaqueInterface {
  static Future<FastText> default_() =>
      RustLib.instance.api.fasttextFastTextDefault();

  /// Loads a model from the given path.
  ///
  /// # Arguments
  ///
  /// * `path` - The file path of the model to load.
  Future<void> loadModel({required String path});

  /// Loads a model from a buffer.
  ///
  /// # Arguments
  ///
  /// * `buffer` - A byte slice containing the model data.
  Future<void> loadModelFromBuffer({required List<int> buffer});

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  /// Creates a new fastText instance.
  static Future<FastText> newInstance() =>
      RustLib.instance.api.fasttextFastTextNew();

  /// Predicts labels for a given text.
  ///
  /// # Arguments
  ///
  /// * `text` - The input text for prediction.
  /// * `k` - The number of top predictions to return.
  /// * `threshold` - The minimum probability for a prediction to be returned.
  Future<List<Prediction>> predict({
    required String text,
    required int k,
    required double threshold,
  });
}

/// Represents a single prediction from the fastText model.
class Prediction {
  final double probability;
  final String label;

  const Prediction({required this.probability, required this.label});

  @override
  int get hashCode => probability.hashCode ^ label.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Prediction &&
          runtimeType == other.runtimeType &&
          probability == other.probability &&
          label == other.label;
}
