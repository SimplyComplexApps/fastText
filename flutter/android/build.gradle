// The Android Gradle Plugin builds the native code with the Android NDK.

group 'com.flutter_rust_bridge.fasttext'
version '1.0'

buildscript {
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        // The Android Gradle Plugin knows how to build native code with the NDK.
        classpath 'com.android.tools.build:gradle:7.3.0'
    }
}

rootProject.allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

apply plugin: 'com.android.library'

android {
    if (project.android.hasProperty("namespace")) {
        namespace 'com.flutter_rust_bridge.fasttext'
    }

    // Bumping the plugin compileSdkVersion requires all clients of this plugin
    // to bump the version in their app.
    compileSdkVersion 33

    // Use the NDK version
    // declared in /android/app/build.gradle file of the Flutter project.
    // Replace it with a version number if this plugin requires a specfic NDK version.
    // (e.g. ndkVersion "23.1.7779620")
    ndkVersion android.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        minSdkVersion 19
    }

    sourceSets {
        main.jniLibs.srcDirs += 'src/main/jniLibs'
    }
}

// Automatically copy over "libc++_shared.so" for the currently used NDK
task copyAndroidNdkLibs(type: Copy) {
    description = "Copies libc++_shared.so from the NDK to the jniLibs directory for each ABI."

    def ndkDir = android.ndkDirectory
    if (ndkDir == null || !ndkDir.exists()) {
        throw new GradleException("NDK not found. Please, ensure the android.ndkVersion is set in your project's build.gradle.")
    }

    def hostTag = System.getProperty("os.name").toLowerCase().with {
        if (it.contains("windows")) return "windows-x86_64"
        if (it.contains("mac")) return "darwin-x86_64"
        return "linux-x86_64"
    }

    def abiToTargetTriple = [
        'arm64-v8a'  : 'aarch64-linux-android',
        'armeabi-v7a': 'armv7-linux-androideabi',
        'x86'        : 'i686-linux-android',
        'x86_64'     : 'x86_64-linux-android'
    ]

    abiToTargetTriple.each { abi, triple ->
        def srcPath = new File(ndkDir, "toolchains/llvm/prebuilt/${hostTag}/sysroot/usr/lib/${triple}/libc++_shared.so")
        if (srcPath.exists()) {
            copy {
                from srcPath.getParent()
                into "src/main/jniLibs/${abi}"
                include srcPath.getName()
            }
        } else {
            logger.warn("Could not find libc++_shared.so for ABI ${abi} at ${srcPath}. This may be okay if you are not targeting this ABI.")
        }
    }
}

tasks.whenTaskAdded { task ->
    if (task.name.startsWith('merge') && task.name.endsWith('JniLibFolders')) {
        task.dependsOn copyAndroidNdkLibs
    }
}

apply from: "../cargokit/gradle/plugin.gradle"
cargokit {
    manifestDir = "../rust"
    libname = "fasttext"
}
